@using System.Configuration
@model IEnumerable<Aeero.Models.Order>  

@{
    ViewBag.Title = "Baking / klargjøring";
}


<h2>
    @ViewBag.Title
    <small class="pull-right" id="orderCountdown">Henter nye ordre om 10 sekunder</small>
</h2>
<div class="table-responsive">
    <table id="prepTable" class="table table-striped table-condensed">
        <thead>
        <tr>
            <th>Navn</th>
            <th>Størelse</th>
            <th>Levering</th>
            <th>Ingredienser <span class="pull-right">Mengde</span></th>
            <th>Vis</th>
            <th>Neste</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in Model)
        {
            var diff = order.DeliveryTime.ToLocalTime().Subtract(DateTime.Now); // used in creating a countdown timer
            foreach (var pizza in order.Lines)
            {
                if (pizza.PizzaState != null && pizza.PizzaState != "preparation")
                {
                    continue;
                }
                <tr id="pizzarow" class="pizzaElement" style="display: table-row" data-pizza="@pizza.Id">
                    <td>@pizza.Description </td>
                    <td>
                        <span class="label label-success">
                            &times;@pizza.Count
                        </span> &nbsp;
                        @pizza.SizeLabel()
                    </td>
                    <td class="time-group">
                        @(order.Deliver ? "Leveres" : "Hentes") @order.DeliveryTime.ToLocalTime().ToShortTimeString()
                        @if (order.DeliveryTime.Date != DateTime.UtcNow.Date)
                        {
                            <span>den @order.DeliveryTime.ToShortDateString()</span>
                        }
                    </td>
                    <td>
                        <ul class="list-group">
                            @foreach (var ingredient in pizza.Ingredients)
                            {
                                <li class="list-group-item">
                                    @ingredient.Ingredient.Name
                                    <span class="pull-right">&times; @ingredient.Count</span>
                                </li>
                            }
                        </ul>
                    </td>
                    <td>
                        <button id="btntoggle" type="button" class="btn btn-info btn-block btn-prev-status togglebtn" value="Vis">
                            <i class="glyphicon glyphicon-option-horizontal"></i>
                            Vis
                        </button>
                    </td>
                    <td>
                        @using (Html.BeginForm(null, null, FormMethod.Post, new {id = "__AjaxAntiForgeryForm"}))
                        {
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@order.Id">
                            <input type="hidden" name="pizzaId" value="@pizza.Id">
                            <button id="btnpost" class="btn btn-block btn-success btn-next-status">
                                <i class="glyphicon glyphicon-circle-arrow-right"></i>
                                @order.NextStateLabel()
                            </button>
                        }
                    </td>
                </tr>
            }
        }
        </tbody>

    </table>
</div>
<button id="updatebtn" type="button" class="btn btn-lg btn-primary">Oppdater</button>
<button id="showallbtn" type="button" class="btn btn-lg btn-info">Vis alle ordre</button>


<script>

    var showAll = false;
    var liste = [];
    $(document) // just to set the list to default closed
        .ready(function() {
            $('.pizzaElement').find('.list-group').toggle();
        });

    $(document) // toggle the list on pressing a row.
        .on('click', '.pizzaElement', function () {
            $(this).find('.list-group').toggle(); // the pressed element

            var pizzaId = $(this).data('pizza');

            var index = liste.indexOf(pizzaId);
            if (index !== -1) { // if a exist in list
                liste.splice(index, 1);
            } else { // if a does not exist
                liste.push(pizzaId);
            }
        });

    // Getting new orders from the server
    var seconds = 11;
    var updateprepTable = function () { // updates the Table
        var reloadPortion = location.pathname + '?showAll=' + showAll + ' #prepTable';
        seconds = 10;
        $('.table-responsive').load(reloadPortion, function() {
            $('#prepTable tr')
                .each(function () {
                    var pizzaId = $(this).data('pizza');
                    if (liste.indexOf(pizzaId) === -1) { // the element is in the list == the row is not collapsed.
                        $(this).find('.list-group').toggle();
                    }
                
                });
        });
    };
    // updates the countdown timer
    setInterval(function() {
        seconds--;
        if (seconds <= 0) {
            updateprepTable();
        }
        $('#orderCountdown').text('Henter nye ordre om ' + seconds + ' sekunder');
    }, 1000);

    // Reset timer if someone interacts with the page.
    $('body').on('click', function() {
        seconds = 11;
    });

    //maping updatebtn to update
    $('#updatebtn').on('click', function () {
        updateprepTable();
    });
    $('#showallbtn').on('click', function () {
        $(this).toggleClass('active');
        showAll = !showAll;
        updateprepTable();
    });

    // post method button
    $('#btnpost')
        .on('click',
            function() {
                $('#hidden-form').submit();
            });


</script>

@*<a href="~/Areas/Touch/Views/Home/Oven.cshtml">~/Areas/Touch/Views/Home/Oven.cshtml</a>*@
